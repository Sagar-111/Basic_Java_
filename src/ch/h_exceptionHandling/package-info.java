package ch.h_exceptionHandling;
/*
 * What is an Exception:
 	An Exception is abnormal condition that arises in a code sequence at run-time. Or in other words it is a run-time error.
 	When Exceptional condition arises, an object representing that exception is created and thrown in the method that caused the Error. 
 	The Exception can be generated by the java rum-time environment when programs violate java rules Or can be generated manually too, to report some error in the code.
 
 Checked Exceptions:	Are enforced by the compiler to handle explicitly, Either by try-catch block or 		declaring them in the method signature using 'throws'. And are the subclass of the Exception 		class. If left un-handled the program will not get compile.
 
 Unchecked Exception:	Are the subclass of the RunTimeException and its subclasses. Compiler does not 		enforce the Unchecked exceptions These exceptions often represent programming errors or 		unexpected conditions that are beyond the control of the programmer. No need to handle them 	explicitly but beneficial handling them too.
 
 
 Exception Hierarchy(java.lang)
 
Object
|
|-- Throwable(C)
   |
   |-- Error(C) (Unchecked)   // Subclass one
   |
   |-- Exception(C) (Checked) // Subclass two
      |
      |-- RuntimeException(C) (Unchecked)  // Automatically defined
	  |
      |-- CustomException (Example of a user-defined checked exception)
 * Exception Handling is Beneficial for
 * Error Identification
 * Program Stability
 * Debugging
 * User-friendly Interface-as you get clear info on what went wrong.
 * Resource Management-such as files or database connections, are properly released even in the presence of errors.
 * Maintainability
 * Security
 
 
 
 
 


 */